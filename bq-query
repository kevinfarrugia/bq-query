#!/bin/bash

usage() {
  echo -e "Usage: $0 [options...] <path_to_script> \n\
 -h, --help          Display help
 -o, --output <path> Output path where to save results \n\
 -f, --format        Specifies the format of the command's output. [pretty|sparse|prettyjson|json|csv] (default=pretty). \n\
 -n, --max           The number of rows to return in the query results. (default=100). \n\
 -V, --verbose       Make the operation more talkative" 1>&2
  exit 1
}

output=""
verbose=0
max=100
format="pretty"

# $@ is all command line parameters passed to the script.
# -o is for short options like -v
# -l is for long options with double dash like --version
# the comma separates different long options
options=$(getopt -l "help,verbose,max:,output:,format:" -o "hVn:f:o:" -- "$@")

# set --:
# If no arguments follow this option, then the positional parameters are unset. Otherwise, the positional parameters
# are set to the arguments, even if some of them begin with a ‘-’.
eval set -- "$options"

while true; do
  case $1 in
  -h | --help)
    usage
    ;;
  -V | --verbose)
    verbose=1
    ;;
  -n | --max)
    max=$2
    ;;
  -f | --format)
    format=$2
    ;;
  -o | --output)
    output=$2
    ;;
  --)
    shift
    break
    ;;
  esac
  shift
done

script=$1

if [ -z "$script" ]; then
  usage
fi

sql=$(<$script)

if [ "$verbose" == 1 ]; then
  echo -e "Running bq query on $script"
  echo -e "...\n"
fi

if [ -f "$output" ]; then
  read -p "Output file exists. Overwrite? (y/N) " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Nn]$ ]] || [[ -z $REPLY ]]; then
    exit
  fi
  > $output
fi

if [ ! -f "$output" ]; then
  touch $output
fi

if [ ! -z "$output" ]; then
  if [ "$verbose" == 1 ]; then
    echo "Overwriting contents in $output"
    echo
  fi
fi

if [ "$verbose" == 1 ]; then
  echo -e "bq query --use_legacy_sql=false --format=$format \n\"$sql\""
  echo
fi

bq query --max_rows=$max --use_legacy_sql=false --format=$format "$sql" |
  if [ ! -z "$output" ]; then
    tee 1>>$output 2>&1
  else
    cat
  fi

if [ ! -z "$output" ] && [ "$verbose" == 1 ]; then
  echo -e "Saved results to $output\n"
fi

if [ "$verbose" == 1 ]; then
  echo "Done."
fi
